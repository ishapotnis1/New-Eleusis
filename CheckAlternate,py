#  (is_royal(current), False)
import re
correct=[]
wrong=["3S","4D"]
import pyparsing # make sure you have this installed



Checker={}
Checker["suit"]=["H","S","C","D"]
Checker["Color"]=["R","B"]
Checker["Value"]=[1,2,3,4,5,6,7,8,9,10,11,12,13]

map={}
map['A']='1'
map['J']='11'
map['Q']='12'
map['K']='13'


def parseRule(rule):

 list2 = []
 list3 = []
 list4=[]
 list=rule.split("(")

 for x in list:
  list2=list2+x.split(")")
 #print list2

 for x in list2:
  list3=list3+x.split(",")
 #print list3

 #str1 = ''.join(list)
 #list=str1.split(")")
 for x in list3:
  if x=="":
   list3.remove(x)

 for x in list3:
  list4 = list4 + x.split(" ")

 for x in list4:
  if x=="":
   list4.remove(x)




   print list4
   return list4


def breakrules(list):
 flag=0
 dictionaryofrules={}
 listTemp=[]
 rule=""
 result=""
 for x in list:

  if(x!=""):
   if x=="True" or x=="False":
    result=x
    break
   if x=="equal" or x=="greater" or x=="less":
    rule=x
    listTemp=[]
    print rule


   else:
    listTemp.append(x)
    dictionaryofrules[rule]=listTemp

  return dictionaryofrules





def extract(attribute,card):
 color="M"
 suit="a"

 if len(card)<3:
  suit=card[1]
  if card[0]!='A' and card[0]!='J'and card[0]!='Q' and card[0]!='K':
   Value=card[0]
  else:
   Value=map[card[0]]
 else:
     Value=card[0]+card[1]
     suit=card[2]
 if suit=='D' or suit=='H':
  color='R'
 else:
  color='B'

 if attribute == "Value":
  return Value
 if attribute == "Color":
  return  color
 if attribute == "Suit":
  return suit

 return


def checkCard(card,list,hypothesis):


  allowedvalues=[]
  allowedsuits=[]
  if "even" in list:
   allowedvalues=['2','4','6','8','10','Q']

  if "odd" in list:
   allowedvalues = ['A', '3', '5', '7', '9', 'J','K']

  if "Royal" in list:
   allowedsuits=['A','Q','J','K']

  suit=extract("Suit",card)
  value=extract("Value",card)
  color = extract("Color", card)
  allowedsuits=list+allowedsuits
  allowedvalues=list+allowedvalues
  """for x,y in list.iteritems():
   if x=="equal":
    if y.get(0)=="Suit":
     if suit in y:
      return  x+y

    if y.get(0)=="Color":
     if color in y:
      return x+y

    if y.get(0) == "Value":
     if value in y:
      return x+y"""
  if suit in allowedsuits:
   hypothesis=hypothesis+" and alternate  "+ suit

  if value in allowedvalues:
   hypothesis = hypothesis + " and alternate " + value

  if color in list:
   hypothesis = hypothesis + " and alternate " + color




  return hypothesis



def CheckAlternate(wrong,hypothesis):

 list=parseRule(hypothesis)


 for x in wrong:
  hypothesis=checkCard(x,list,hypothesis)

 return hypothesis

print  CheckAlternate(wrong,"equal(color(current), B")


















































